{"version":3,"sources":["models/word.ts","constants/constants.ts","store/action-creators/words.ts","store/action-creators/index.ts","hooks/useTypedSelector.ts","components/WordCard/WordCard.tsx","hooks/useAudios.ts","components/WordList/WordList.tsx","hooks/useAction.ts","components/Textbook/TextBook.tsx","components/PromoPage/PromoPage.tsx","store/reducers/words.ts","store/reducers/index.ts","store/index.ts","App.tsx","index.tsx"],"names":["WordListActionTypes","FOOTER_COPYRIGHT","developers","link","name","API_BASE_URL","WORD_GROUPS","weak","easy","middle","hard","impossible","legendary","constants","FETCH_WORD_LIST","FETCH_WORD_LIST_ERROR","FETCH_WORD_LIST_SUCCESS","GET_WORD_LIST_PAGE","GET_WORD_LIST_GROUP","SHOW_WORD_TRANSLATE","SHOW_WORD_BUTTONS","fetchWords","group","page","dispatch","a","type","fetch","method","headers","Accept","then","data","json","catch","error","payload","response","setPage","number","setGroup","showTranslate","show","showButtons","ActionCreators","WordsActionCreators","useTypedSelector","useSelector","WordCard","props","word","transcription","wordTranslate","image","textMeaning","textExample","textMeaningTranslate","textExampleTranslate","playHandler","translate","displayButtons","className","src","alt","onClick","useAudios","audios","map","audio","audioExample","audioMeaning","useState","current","setCurrent","audioItem","setAudioItem","audioIndex","setAudioIndex","isPlaying","setIsPlaying","checkIsItPlayingForFixError","currentTime","paused","ended","readyState","playNext","prevIndex","newIndex","Audio","useEffect","play","addEventListener","removeEventListener","setAudio","currentWord","find","wordObj","check","pause","toggleAudio","WordList","history","useHistory","useDispatch","bindActionCreators","useAction","useParams","groupFromUrl","pageFromUrl","openSettings","setOpenSettings","store","wordList","words","loading","push","Number","isInteger","Object","entries","key","value","disabled","aria-haspopup","aria-controls","aria-hidden","id","role","checked","onChange","TextBook","PromoPage","to","initialState","rootReducer","combineReducers","state","action","index","createStore","applyMiddleware","thunk","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff72fb2d.chunk.js","sourcesContent":["import { Dispatch } from 'react';\n\nexport interface Word {\n  id?: string;\n  group?: number;\n  page?: number;\n  word: string;\n  image: string;\n  audio: string;\n  audioMeaning: string;\n  audioExample: string;\n  textMeaning: string;\n  textExample: string;\n  transcription: string;\n  wordTranslate: string;\n  textMeaningTranslate: string;\n  textExampleTranslate: string;\n}\n\nexport interface WordListState {\n  words: Word[];\n  page: number;\n  group: number;\n  loading: boolean;\n  error: null | string;\n  translate: boolean;\n  displayButtons: boolean;\n}\n\nexport interface WordsDispatchProps {\n  showButtons: (show: boolean) => (dispatch: Dispatch<WordListAction>) => void;\n  setGroup: (number: number) => (dispatch: Dispatch<WordListAction>) => void;\n  fetchWords: (group: number, page: number) => (dispatch: Dispatch<WordListAction>) => Promise<void>;\n  showTranslate: (show: boolean) => (dispatch: Dispatch<WordListAction>) => void;\n  setPage: (number: number) => (dispatch: Dispatch<WordListAction>) => void;\n}\n\ninterface FetchWordListAction {\n  type: WordListActionTypes.FETCH_WORD_LIST;\n}\n\ninterface FetchWordListSuccessAction {\n  type: WordListActionTypes.FETCH_WORD_LIST_SUCCESS;\n  payload: Word[];\n}\n\ninterface FetchWordListErrorAction {\n  type: WordListActionTypes.FETCH_WORD_LIST_ERROR;\n  payload: string;\n}\n\ninterface GetWordListPage {\n  type: WordListActionTypes.GET_WORD_LIST_PAGE;\n  payload: number;\n}\n\ninterface ShowWordTranslate {\n  type: WordListActionTypes.SHOW_WORD_TRANSLATE;\n  payload: boolean;\n}\n\ninterface ShowWordButtons {\n  type: WordListActionTypes.SHOW_WORD_BUTTONS;\n  payload: boolean;\n}\n\ninterface GetWordListGroup {\n  type: WordListActionTypes.GET_WORD_LIST_GROUP;\n  payload: number;\n}\n\nexport enum WordListActionTypes {\n  FETCH_WORD_LIST = 'FETCH_WORD_LIST',\n  FETCH_WORD_LIST_SUCCESS = 'FETCH_WORD_LIST_SUCCESS',\n  FETCH_WORD_LIST_ERROR = 'FETCH_WORD_LIST_ERROR',\n  GET_WORD_LIST_PAGE = 'GET_WORD_LIST_PAGE',\n  GET_WORD_LIST_GROUP = 'GET_WORD_LIST_GROUP',\n  SHOW_WORD_TRANSLATE = 'SHOW_WORD_TRANSLATE',\n  SHOW_WORD_BUTTONS = 'SHOW_WORD_BUTTONS',\n}\n\nexport type WordListAction =\n  FetchWordListAction\n  | FetchWordListSuccessAction\n  | FetchWordListErrorAction\n  | GetWordListPage\n  | GetWordListGroup\n  | ShowWordTranslate\n  | ShowWordButtons;\n","export const FOOTER_COPYRIGHT = {\n  developers: [\n    { link: 'https://github.com/bramov', name: '@Bramov' },\n    { link: 'https://github.com/GregoryMoskalev', name: '@GregoryMoskalev' },\n    { link: 'https://github.com/johnneon', name: '@Johnneon' },\n    { link: 'https://github.com/Iogsotot', name: '@IogSotot' },\n  ],\n};\n\nexport const API_BASE_URL = 'https://rslang-2020q3.herokuapp.com';\n\nexport const WORD_GROUPS = {\n  weak: 0,\n  easy: 1,\n  middle: 2,\n  hard: 3,\n  impossible: 4,\n  legendary: 5,\n};\n","import { Dispatch } from 'react';\nimport { constants } from '../../constants';\nimport { WordListAction, WordListActionTypes } from '../../models/word';\n\nconst { API_BASE_URL } = constants;\n\nconst {\n  FETCH_WORD_LIST,\n  FETCH_WORD_LIST_ERROR,\n  FETCH_WORD_LIST_SUCCESS,\n  GET_WORD_LIST_PAGE,\n  GET_WORD_LIST_GROUP,\n  SHOW_WORD_TRANSLATE,\n  SHOW_WORD_BUTTONS,\n} = WordListActionTypes;\n\nexport const fetchWords = (group: number, page: number) =>\n  (async (dispatch: Dispatch<WordListAction>): Promise<void> => {\n    dispatch({ type: FETCH_WORD_LIST });\n\n    const response = await fetch(\n      `${API_BASE_URL}/words?group=${group}&page=${page}`,\n      {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n      .then((data) => data.json())\n      .catch((error) => {\n        dispatch({ type: FETCH_WORD_LIST_ERROR, payload: error });\n      });\n\n    dispatch({ type: FETCH_WORD_LIST_SUCCESS, payload: response });\n  });\n\nexport const setPage = (number: number) =>\n  ((dispatch: Dispatch<WordListAction>): void => {\n    dispatch({ type: GET_WORD_LIST_PAGE, payload: number });\n  });\n\nexport const setGroup = (number: number) =>\n  ((dispatch: Dispatch<WordListAction>): void => {\n    dispatch({ type: GET_WORD_LIST_GROUP, payload: number });\n  });\n\nexport const showTranslate = (show: boolean) =>\n  ((dispatch: Dispatch<WordListAction>): void => {\n    dispatch({ type: SHOW_WORD_TRANSLATE, payload: show });\n  });\n\nexport const showButtons = (show: boolean) =>\n  ((dispatch: Dispatch<WordListAction>): void => {\n    dispatch({ type: SHOW_WORD_BUTTONS, payload: show });\n  });\n","import * as WordsActionCreators from './words';\n\nexport const ActionCreators = {\n  ...WordsActionCreators,\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { IRootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<IRootState> = useSelector;\n","import React, { FC } from 'react';\nimport { WordCardProps } from './WordCard.model';\n\nconst WordCard: FC<WordCardProps> = props => {\n  const {\n    word,\n    transcription,\n    wordTranslate,\n    image,\n    textMeaning,\n    textExample,\n    textMeaningTranslate,\n    textExampleTranslate,\n    playHandler,\n    translate,\n    displayButtons,\n  } = props;\n\n  return (\n    <div className=\"word columns is-1 is-vcentered\">\n\n      <figure className=\"image\">\n        <img src={image} alt=\"Word\" />\n      </figure>\n\n      <div className=\"word__info column is-7\">\n        <h3 className=\"word__name\">{`${word} (${transcription}) ${translate ? `/ ${wordTranslate}` : ''}`}</h3>\n        <p className=\"word__meaning\">{textMeaning}</p>\n        {translate ? <p className=\"word__meaning word__meaning-translate\">{textMeaningTranslate}</p> : ''}\n\n        <p className=\"word__example\">{textExample}</p>\n\n        {translate ? <p className=\"word__example word__example-translate\">{textExampleTranslate}</p> : ''}\n\n        <button className=\"button is-outlined\" onClick={() => playHandler(word)}>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-volume-up\">&#0;</i>\n          </span>\n        </button>\n\n        {displayButtons ? (\n          <>\n            <button className=\"button is-success\">\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-check\">&#0;</i>\n              </span>\n              <span>Save</span>\n            </button>\n            <button className=\"button is-danger is-outlined\">\n              <span>Delete</span>\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-times\">&#0;</i>\n              </span>\n            </button>\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordCard;\n","import { useState, useEffect } from 'react';\nimport { Word } from '../models/word';\n\ninterface UseAudiosHook {\n  setAudio: (word: string) => void;\n  toggleAudio: () => void;\n  currentWord: string;\n  isPlaying: boolean;\n}\n\nexport const useAudios = (data: Word[]): UseAudiosHook => {\n  const audios = data.map(({ word, audio, audioExample, audioMeaning }) => ({\n    word,\n    audios: [audio, audioMeaning, audioExample],\n  }));\n  const [current, setCurrent] = useState({\n    word: '',\n    audios: [''],\n  });\n  const [audioItem, setAudioItem] = useState<HTMLAudioElement | null>();\n  const [audioIndex, setAudioIndex] = useState<number>(0);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n  const checkIsItPlayingForFixError = () => {\n    if (audioItem) {\n      return audioItem.currentTime > 0 && !audioItem.paused && !audioItem.ended\n        && audioItem.readyState > 2;\n    }\n\n    return false;\n  };\n\n  const play = () => {\n    if (audioItem) {\n      audioItem.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const setAudio = (word: string) => {\n    const currentWord = audios.find((wordObj) => wordObj.word === word);\n    const check = checkIsItPlayingForFixError();\n\n    if (isPlaying && audioItem && check) {\n      audioItem.pause();\n      audioItem.currentTime = 0;\n      setAudioIndex(0);\n    }\n\n    if (currentWord) {\n      setCurrent(currentWord);\n      setAudioItem(new Audio(currentWord.audios[0]));\n    }\n  };\n\n  const playNext = () => {\n    if (audioIndex >= 2) {\n      setAudioIndex(0);\n      setIsPlaying(false);\n      setAudioItem(null);\n    } else {\n      setAudioIndex((prevIndex) => {\n        const newIndex = prevIndex + 1;\n        setAudioItem(new Audio(current.audios[newIndex]));\n\n        return newIndex;\n      });\n    }\n  };\n\n  useEffect(() => {\n    play();\n    audioItem?.addEventListener('ended', playNext);\n    return () => audioItem?.removeEventListener('ended', playNext);\n  }, [audioItem]);\n\n  const toggleAudio = () => {\n    const check = checkIsItPlayingForFixError();\n    if (isPlaying && check) {\n      audioItem?.pause();\n      setIsPlaying(false);\n    } else {\n      audioItem?.play();\n      setIsPlaying(true);\n    }\n  };\n\n  return {\n    setAudio,\n    toggleAudio,\n    isPlaying,\n    currentWord: current.word,\n  };\n};\n","import './wordList.scss';\nimport React, { useEffect, useState, FC } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useAction } from '../../hooks/useAction';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport WordCard from '../WordCard';\nimport { useAudios } from '../../hooks/useAudios';\nimport { constants } from '../../constants';\n\nconst { WORD_GROUPS } = constants;\n\nconst WordList: FC = () => {\n  const history = useHistory();\n  const { fetchWords, setGroup, setPage, showButtons, showTranslate } = useAction();\n  const { group: groupFromUrl, page: pageFromUrl }: { group: string; page: string } = useParams();\n  const [openSettings, setOpenSettings] = useState<boolean>(false);\n  const { words, page, group, loading, displayButtons, translate } = useTypedSelector(store => store.wordList);\n  const { setAudio, toggleAudio, currentWord, isPlaying } = useAudios(words);\n\n  const playHandler = (word: string) => {\n    setAudio(word);\n  };\n\n  const nextPage = () => {\n    setPage(page + 1);\n  };\n\n  const prevPage = () => {\n    setPage(page - 1);\n  };\n\n  const chooseGroup = (groupNumber: number) => {\n    setGroup(groupNumber);\n    setPage(0);\n  };\n\n  const handleSettings = () => {\n    setOpenSettings(!openSettings);\n  };\n\n  useEffect(() => {\n    fetchWords(group, page);\n    history.push(`/textbook/${group}/${page}`);\n  }, [group, page]);\n\n  useEffect(() => {\n    if (Number.isInteger(+pageFromUrl) && Number.isInteger(+groupFromUrl)) {\n      setPage(+pageFromUrl);\n      setGroup(+groupFromUrl);\n    }\n  }, []);\n\n  return (\n    <section>\n      <div>\n        <p>Groups</p>\n        {Object.entries(WORD_GROUPS).map(([key, value]) => (\n          <button disabled={value === group} key={key} onClick={() => chooseGroup(value)}>\n            {key}\n          </button>\n        ))}\n      </div>\n\n      <div className={`dropdown ${openSettings ? 'is-active' : ''}`}>\n        <div className=\"dropdown-trigger\">\n          <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu2\" onClick={handleSettings}>\n            <span>\n              <i className=\"fas fa-cog\">&#0;</i>\n            </span>\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\">\n                &#0;\n              </i>\n            </span>\n          </button>\n        </div>\n        <div className=\"dropdown-menu\" id=\"dropdown-menu2\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            <div className=\"dropdown-item\">\n              show translate:\n              <input\n                type=\"checkbox\"\n                name=\"translate\"\n                checked={translate}\n                onChange={() => showTranslate(!translate)}\n              />\n            </div>\n            <hr className=\"dropdown-divider\" />\n            <div className=\"dropdown-item\">\n              show buttons:\n              <input\n                type=\"checkbox\"\n                name=\"buttons\"\n                checked={displayButtons}\n                onChange={() => showButtons(!displayButtons)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"words\">\n        <div className=\"audio__controller\">\n          <button onClick={toggleAudio} className=\"button is-danger is-outlined\">\n            <span className=\"icon is-small\">\n              {isPlaying ? <i className=\"fas fa-pause\">&#0;</i> : <i className=\"fas fa-play\">&#0;</i>}\n            </span>\n          </button>\n          {`${currentWord}`}\n        </div>\n\n        <div className=\"words__inner box\">\n          {!loading ? (\n            words.map(word => (\n              <WordCard\n                key={word.id}\n                playHandler={playHandler}\n                translate={translate}\n                displayButtons={displayButtons}\n                {...word}\n              />\n            ))\n          ) : (\n            <div className=\"spinner\">\n              <div className=\"spinner__inner\">\n                <div>&#0;</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <button disabled={page === 0} onClick={prevPage}>\n          prev\n        </button>\n        {page + 1}\n        <button disabled={page === 29} onClick={nextPage}>\n          next\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default WordList;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ActionCreators } from '../store/action-creators';\nimport { WordsDispatchProps } from '../models/word';\n\nexport const useAction = (): WordsDispatchProps => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React, { FC } from 'react';\nimport WordList from '../WordList';\n\nconst TextBook: FC = () => (\n  <div className=\"textbook\">\n    <WordList />\n  </div>\n);\n\nexport default TextBook;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PromoPage: FC = () => (\n  <>\n    <Link to=\"/textbook/0/0\">TextBook page</Link>\n  </>\n);\n\nexport default PromoPage;\n","import { WordListAction, WordListActionTypes, WordListState } from '../../models/word';\n\nconst {\n  FETCH_WORD_LIST,\n  FETCH_WORD_LIST_ERROR,\n  FETCH_WORD_LIST_SUCCESS,\n  GET_WORD_LIST_PAGE,\n  GET_WORD_LIST_GROUP,\n  SHOW_WORD_TRANSLATE,\n  SHOW_WORD_BUTTONS,\n} = WordListActionTypes;\n\nconst initialState: WordListState = {\n  words: [],\n  page: 0,\n  group: 0,\n  loading: false,\n  error: null,\n  translate: true,\n  displayButtons: true,\n};\n\nexport const wordListReducer = (state = initialState, action: WordListAction): WordListState => {\n  switch (action.type) {\n    case FETCH_WORD_LIST:\n      return { ...state, loading: true };\n\n    case GET_WORD_LIST_PAGE:\n      return { ...state, page: action.payload };\n\n    case GET_WORD_LIST_GROUP:\n      return { ...state, group: action.payload };\n\n    case FETCH_WORD_LIST_SUCCESS:\n      return { ...state, loading: false, words: action.payload };\n\n    case FETCH_WORD_LIST_ERROR:\n      return { ...state, loading: false, error: action.payload };\n\n    case SHOW_WORD_TRANSLATE:\n      return { ...state, translate: action.payload };\n\n    case SHOW_WORD_BUTTONS:\n      return { ...state, displayButtons: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { wordListReducer } from './words';\n\nexport const rootReducer = combineReducers({\n  wordList: wordListReducer,\n});\n\nexport type IRootState = ReturnType<typeof rootReducer>;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers';\n\nexport const index = createStore(rootReducer, applyMiddleware(thunk));\n","import './App.scss';\nimport React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport TextBook from './components/Textbook';\nimport PromoPage from './components/PromoPage';\nimport { index } from './store';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <Provider store={index}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact>\n            <PromoPage />\n          </Route>\n\n          <Route path=\"/textbook/:group/:page\" exact>\n            <TextBook />\n          </Route>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </div>\n);\n\nexport default App;\n","import 'bulma/css/bulma.css';\nimport './index.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}